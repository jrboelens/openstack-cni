// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	currentcni "github.com/containernetworking/cni/pkg/types/040"
	"github.com/jboelensns/openstack-cni/pkg/cniserver"
	"github.com/jboelensns/openstack-cni/pkg/util"
	"sync"
)

// Ensure, that CommandHandlerMock does implement cniserver.CommandHandler.
// If this is not the case, regenerate this file with moq.
var _ cniserver.CommandHandler = &CommandHandlerMock{}

// CommandHandlerMock is a mock implementation of cniserver.CommandHandler.
//
//	func TestSomethingThatUsesCommandHandler(t *testing.T) {
//
//		// make and configure a mocked cniserver.CommandHandler
//		mockedCommandHandler := &CommandHandlerMock{
//			AddFunc: func(cmd util.CniCommand) (*currentcni.Result, error) {
//				panic("mock out the Add method")
//			},
//			CheckFunc: func(cmd util.CniCommand) error {
//				panic("mock out the Check method")
//			},
//			DelFunc: func(cmd util.CniCommand) error {
//				panic("mock out the Del method")
//			},
//		}
//
//		// use mockedCommandHandler in code that requires cniserver.CommandHandler
//		// and then make assertions.
//
//	}
type CommandHandlerMock struct {
	// AddFunc mocks the Add method.
	AddFunc func(cmd util.CniCommand) (*currentcni.Result, error)

	// CheckFunc mocks the Check method.
	CheckFunc func(cmd util.CniCommand) error

	// DelFunc mocks the Del method.
	DelFunc func(cmd util.CniCommand) error

	// calls tracks calls to the methods.
	calls struct {
		// Add holds details about calls to the Add method.
		Add []struct {
			// Cmd is the cmd argument value.
			Cmd util.CniCommand
		}
		// Check holds details about calls to the Check method.
		Check []struct {
			// Cmd is the cmd argument value.
			Cmd util.CniCommand
		}
		// Del holds details about calls to the Del method.
		Del []struct {
			// Cmd is the cmd argument value.
			Cmd util.CniCommand
		}
	}
	lockAdd   sync.RWMutex
	lockCheck sync.RWMutex
	lockDel   sync.RWMutex
}

// Add calls AddFunc.
func (mock *CommandHandlerMock) Add(cmd util.CniCommand) (*currentcni.Result, error) {
	if mock.AddFunc == nil {
		panic("CommandHandlerMock.AddFunc: method is nil but CommandHandler.Add was just called")
	}
	callInfo := struct {
		Cmd util.CniCommand
	}{
		Cmd: cmd,
	}
	mock.lockAdd.Lock()
	mock.calls.Add = append(mock.calls.Add, callInfo)
	mock.lockAdd.Unlock()
	return mock.AddFunc(cmd)
}

// AddCalls gets all the calls that were made to Add.
// Check the length with:
//
//	len(mockedCommandHandler.AddCalls())
func (mock *CommandHandlerMock) AddCalls() []struct {
	Cmd util.CniCommand
} {
	var calls []struct {
		Cmd util.CniCommand
	}
	mock.lockAdd.RLock()
	calls = mock.calls.Add
	mock.lockAdd.RUnlock()
	return calls
}

// Check calls CheckFunc.
func (mock *CommandHandlerMock) Check(cmd util.CniCommand) error {
	if mock.CheckFunc == nil {
		panic("CommandHandlerMock.CheckFunc: method is nil but CommandHandler.Check was just called")
	}
	callInfo := struct {
		Cmd util.CniCommand
	}{
		Cmd: cmd,
	}
	mock.lockCheck.Lock()
	mock.calls.Check = append(mock.calls.Check, callInfo)
	mock.lockCheck.Unlock()
	return mock.CheckFunc(cmd)
}

// CheckCalls gets all the calls that were made to Check.
// Check the length with:
//
//	len(mockedCommandHandler.CheckCalls())
func (mock *CommandHandlerMock) CheckCalls() []struct {
	Cmd util.CniCommand
} {
	var calls []struct {
		Cmd util.CniCommand
	}
	mock.lockCheck.RLock()
	calls = mock.calls.Check
	mock.lockCheck.RUnlock()
	return calls
}

// Del calls DelFunc.
func (mock *CommandHandlerMock) Del(cmd util.CniCommand) error {
	if mock.DelFunc == nil {
		panic("CommandHandlerMock.DelFunc: method is nil but CommandHandler.Del was just called")
	}
	callInfo := struct {
		Cmd util.CniCommand
	}{
		Cmd: cmd,
	}
	mock.lockDel.Lock()
	mock.calls.Del = append(mock.calls.Del, callInfo)
	mock.lockDel.Unlock()
	return mock.DelFunc(cmd)
}

// DelCalls gets all the calls that were made to Del.
// Check the length with:
//
//	len(mockedCommandHandler.DelCalls())
func (mock *CommandHandlerMock) DelCalls() []struct {
	Cmd util.CniCommand
} {
	var calls []struct {
		Cmd util.CniCommand
	}
	mock.lockDel.RLock()
	calls = mock.calls.Del
	mock.lockDel.RUnlock()
	return calls
}
